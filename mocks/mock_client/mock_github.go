// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Namchee/konfigured/internal (interfaces: GithubClient,PullRequestService,RepositoryService)

// Package mock_client is a generated GoMock package.
package mock_client

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	github "github.com/google/go-github/v48/github"
)

// MockGithubClient is a mock of GithubClient interface.
type MockGithubClient struct {
	ctrl     *gomock.Controller
	recorder *MockGithubClientMockRecorder
}

// MockGithubClientMockRecorder is the mock recorder for MockGithubClient.
type MockGithubClientMockRecorder struct {
	mock *MockGithubClient
}

// NewMockGithubClient creates a new mock instance.
func NewMockGithubClient(ctrl *gomock.Controller) *MockGithubClient {
	mock := &MockGithubClient{ctrl: ctrl}
	mock.recorder = &MockGithubClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGithubClient) EXPECT() *MockGithubClientMockRecorder {
	return m.recorder
}

// GetChangedFiles mocks base method.
func (m *MockGithubClient) GetChangedFiles(arg0 context.Context, arg1 int) ([]*github.CommitFile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChangedFiles", arg0, arg1)
	ret0, _ := ret[0].([]*github.CommitFile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChangedFiles indicates an expected call of GetChangedFiles.
func (mr *MockGithubClientMockRecorder) GetChangedFiles(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChangedFiles", reflect.TypeOf((*MockGithubClient)(nil).GetChangedFiles), arg0, arg1)
}

// GetFileContent mocks base method.
func (m *MockGithubClient) GetFileContent(arg0 context.Context, arg1 string) (*github.RepositoryContent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileContent", arg0, arg1)
	ret0, _ := ret[0].(*github.RepositoryContent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileContent indicates an expected call of GetFileContent.
func (mr *MockGithubClientMockRecorder) GetFileContent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileContent", reflect.TypeOf((*MockGithubClient)(nil).GetFileContent), arg0, arg1)
}

// MockPullRequestService is a mock of PullRequestService interface.
type MockPullRequestService struct {
	ctrl     *gomock.Controller
	recorder *MockPullRequestServiceMockRecorder
}

// MockPullRequestServiceMockRecorder is the mock recorder for MockPullRequestService.
type MockPullRequestServiceMockRecorder struct {
	mock *MockPullRequestService
}

// NewMockPullRequestService creates a new mock instance.
func NewMockPullRequestService(ctrl *gomock.Controller) *MockPullRequestService {
	mock := &MockPullRequestService{ctrl: ctrl}
	mock.recorder = &MockPullRequestServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPullRequestService) EXPECT() *MockPullRequestServiceMockRecorder {
	return m.recorder
}

// ListFiles mocks base method.
func (m *MockPullRequestService) ListFiles(arg0 context.Context, arg1, arg2 string, arg3 int, arg4 *github.ListOptions) ([]*github.CommitFile, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFiles", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*github.CommitFile)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListFiles indicates an expected call of ListFiles.
func (mr *MockPullRequestServiceMockRecorder) ListFiles(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFiles", reflect.TypeOf((*MockPullRequestService)(nil).ListFiles), arg0, arg1, arg2, arg3, arg4)
}

// MockRepositoryService is a mock of RepositoryService interface.
type MockRepositoryService struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryServiceMockRecorder
}

// MockRepositoryServiceMockRecorder is the mock recorder for MockRepositoryService.
type MockRepositoryServiceMockRecorder struct {
	mock *MockRepositoryService
}

// NewMockRepositoryService creates a new mock instance.
func NewMockRepositoryService(ctrl *gomock.Controller) *MockRepositoryService {
	mock := &MockRepositoryService{ctrl: ctrl}
	mock.recorder = &MockRepositoryServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryService) EXPECT() *MockRepositoryServiceMockRecorder {
	return m.recorder
}

// GetContents mocks base method.
func (m *MockRepositoryService) GetContents(arg0 context.Context, arg1, arg2, arg3 string, arg4 *github.RepositoryContentGetOptions) (*github.RepositoryContent, []*github.RepositoryContent, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContents", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*github.RepositoryContent)
	ret1, _ := ret[1].([]*github.RepositoryContent)
	ret2, _ := ret[2].(*github.Response)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetContents indicates an expected call of GetContents.
func (mr *MockRepositoryServiceMockRecorder) GetContents(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContents", reflect.TypeOf((*MockRepositoryService)(nil).GetContents), arg0, arg1, arg2, arg3, arg4)
}
